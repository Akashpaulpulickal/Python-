# Create a set
my_set = {1, 2, 3, 4, 5} # Creating a set with initial values

# 1. add() - Add an element to the set
my_set.add(6) # Adding 6 to the set
print("After add:", my_set)

# 2. update() - Add multiple elements to the set
my_set.update([7, 8]) # Adding [7, 8] to the set
print("After update:", my_set)

# 3. remove() - Remove an element from the set (raises an error if the element is not found)
my_set.remove(2) # Removing 2 from the set
print("After remove:", my_set)

# 4. discard() - Remove an element from the set (does not raise an error if the element is not found)
my_set.discard(3) # Discarding 3 from the set
print("After discard:", my_set)

# 5. pop() - Remove and return an arbitrary element from the set
popped_element = my_set.pop() # Popping an arbitrary element
print("After pop:", my_set, "| Popped element:", popped_element)

# 6. clear() - Remove all elements from the set
my_set.clear() # Clearing the set
print("After clear:", my_set)

# Recreate the set for further methods
my_set = {1, 2, 3, 4, 5}

# 7. union() - Return a set containing the union of sets
another_set = {4, 5, 6, 7}
union_set = my_set.union(another_set) # Union of my_set and another_set
print("Union of sets:", union_set)

# 8. intersection() - Return a set containing the intersection of sets
intersection_set = my_set.intersection(another_set) # Intersection of my_set and another_set
print("Intersection of sets:", intersection_set)

# 9. difference() - Return a set containing the difference of sets
difference_set = my_set.difference(another_set) # Difference of my_set and another_set
print("Difference of sets:", difference_set)

# 10. symmetric_difference() - Return a set containing the symmetric difference of sets
symmetric_difference_set = my_set.symmetric_difference(another_set) # Symmetric difference of my_set and another_set
print("Symmetric difference of sets:", symmetric_difference_set)

# 11. issubset() - Return whether another set contains this set
is_subset = my_set.issubset(another_set) # Check if my_set is a subset of another_set
print("Is my_set a subset of another_set?", is_subset)

# 12. issuperset() - Return whether this set contains another set
is_superset = my_set.issuperset(another_set) # Check if my_set is a superset of another_set
print("Is my_set a superset of another_set?", is_superset)

# 13. isdisjoint() - Return whether two sets have a null intersection
is_disjoint = my_set.isdisjoint(another_set) # Check if my_set is disjoint with another_set
print("Is my_set disjoint with another_set?", is_disjoint)

# 14. copy() - Return a shallow copy of the set
copied_set = my_set.copy() # Copying the set
print("Copied set:", copied_set)

# 15. len() - Return the number of elements in the set
set_length = len(my_set) # Getting the length of the set
print("Length of set:", set_length)

# 16. in - Check if an element exists in the set
element_exists = 3 in my_set # Checking if 3 exists in the set
print("Does 3 exist in the set?", element_exists)

# 17. Loop through a set
print("Looping through the set:")
for item in my_set:
    print(item)
